<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:circularProgressBar="clr-namespace:MaterialDesignThemes.Wpf.Converters.CircularProgressBar;assembly=MaterialDesignThemes.Wpf"
    xml:lang="id-ID">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/SiPintar;component/Assets/ResourceDictionaries/BaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="LinkButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="18" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{StaticResource SecondaryBlue}" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>

    <Style x:Key="DefaultTimePicker" TargetType="md:TimePicker">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type md:TimePicker}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                            <Grid
                                Width="30"
                                Height="30"
                                Background="Transparent">
                                <md:PackIcon
                                    Width="20"
                                    Height="20"
                                    Margin="0,-1,10,0"
                                    Kind="ClockOutline" />
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <DatePickerTextBox
                            x:Name="PART_TextBox"
                            Grid.Row="0"
                            Margin="5,0,0,0"
                            Padding="6,0,8,0"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="Center"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="{TemplateBinding Focusable}"
                            IsEnabled="False"
                            Style="{DynamicResource MaterialDesignDatePickerTextBox}" />
                        <Button
                            x:Name="PART_Button"
                            Height="17"
                            Margin="4,0,0,-3"
                            Padding="0"
                            HorizontalAlignment="Right"
                            Focusable="False"
                            Foreground="{TemplateBinding BorderBrush}"
                            Template="{StaticResource DropDownButtonTemplate}" />
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            CustomPopupPlacementCallback="{x:Static wpf:CustomPopupPlacementCallbackHelper.LargePopupCallback}"
                            Placement="Custom"
                            PlacementTarget="{Binding ElementName=PART_TextBox}"
                            PopupAnimation="Fade"
                            StaysOpen="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter TargetName="PART_TextBox" Property="Padding" Value="10,-5,22,-5" />
                            <Setter TargetName="PART_Button" Property="Margin" Value="4,0,12,-3" />
                            <Setter TargetName="PART_Button" Property="Height" Value="20" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter TargetName="PART_TextBox" Property="Padding" Value="10,-5,22,-5" />
                            <Setter TargetName="PART_Button" Property="Margin" Value="4,0,12,-3" />
                            <Setter TargetName="PART_Button" Property="Height" Value="20" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="PART_Button" Property="Margin" Value="4,0,0,-15" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Button" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter TargetName="PART_TextBox" Property="wpf:ValidationAssist.HasError" Value="True" />
                            <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource ValidationErrorBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_TextBox" Property="BorderBrush" Value="{StaticResource Grey01}" />
                            <Setter TargetName="PART_Root" Property="Background" Value="#F6F6F6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioStyle" TargetType="RadioButton">
        <Setter Property="FontSize" Value="10px" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="Margin" Value="10,0,0,0" />
        <Setter Property="Foreground" Value="{StaticResource Astronaut}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="14" Height="14">
                                <Border
                                    Name="RadioOuter"
                                    Panel.ZIndex="1"
                                    Background="White"
                                    BorderBrush="{StaticResource Gray100}"
                                    BorderThickness="1.3"
                                    CornerRadius="15" />
                                <Border
                                    Name="RadioMark"
                                    Margin="3"
                                    Panel.ZIndex="2"
                                    Background="{StaticResource SecondaryBlue}"
                                    CornerRadius="15"
                                    Visibility="Hidden" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--  Text element  -->
                        <TextBlock
                            Margin="5,1,0,0"
                            FontFamily="{TemplateBinding FontFamily}"
                            FontSize="{TemplateBinding FontSize}"
                            Foreground="{TemplateBinding Foreground}">
                            <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RadioOuter" Property="BorderBrush" Value="{StaticResource SecondaryBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FilterCheckBoxReport" TargetType="CheckBox">
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="#4E5153" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="14"
                                Height="14"
                                Background="White"
                                BorderBrush="{StaticResource Nepal}"
                                BorderThickness="1"
                                CornerRadius="2">
                                <Grid>
                                    <Path
                                        x:Name="CheckMark"
                                        Width="10"
                                        Height="8"
                                        Data="M 1 4 L 4 7 9 1"
                                        SnapsToDevicePixels="False"
                                        Stroke="White"
                                        StrokeThickness="2"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="8,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="DataGridHeaderRegular"
        BasedOn="{StaticResource {x:Type DataGridColumnHeader}}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{StaticResource Black20}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="SeparatorVisibility" Value="Visible" />
        <Setter Property="Foreground" Value="{StaticResource Black100}" />
    </Style>

    <Style x:Key="WhiteCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="TextBlock.TextAlignment" Value="Left" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Padding" Value="8.64,0" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style
        x:Key="WhiteCellText"
        BasedOn="{StaticResource MaterialDesignDataGridTextColumnStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="8.64,0" />
    </Style>

    <Style
        x:Key="DataGridRegular"
        BasedOn="{StaticResource {x:Type DataGrid}}"
        TargetType="DataGrid">
        <Setter Property="Background" Value="{StaticResource White100}" />
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource Gray100}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource Gray100}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource Gray100}" />
        <Setter Property="GridLinesVisibility" Value="All" />
    </Style>

    <Style x:Key="DataGridColumnNonair" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{StaticResource Black20}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="SeparatorVisibility" Value="Visible" />
        <Setter Property="Foreground" Value="{StaticResource Black100}" />
    </Style>

    <Style x:Key="DataGridColumnRegular" TargetType="DataGridCell">
        <Setter Property="Padding" Value="40" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style
        x:Key="DataGridHeaderDark"
        BasedOn="{StaticResource DataGridHeaderRegular}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{StaticResource EbonyClay}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="FontFamily" Value="{StaticResource MontserratSemiBold}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="10" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HasItems}" Value="False">
                <Setter Property="Background" Value="{StaticResource Black20}" />
                <Setter Property="Foreground" Value="{StaticResource Gray}" />
                <Setter Property="BorderBrush" Value="{StaticResource Grey01}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextDataGridCellRegular" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="LineHeight" Value="1" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Foreground" Value="{StaticResource Black90}" />
        <Setter Property="TextWrapping" Value="WrapWithOverflow" />
    </Style>

    <Style
        x:Key="TextDataGridCellRight"
        BasedOn="{StaticResource TextDataGridCellRegular}"
        TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <Style x:Key="TextEditDataGridCellRegular" TargetType="{x:Type TextBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Foreground" Value="{StaticResource Black90}" />
    </Style>

    <Style
        x:Key="TextEditDataGridCellRight"
        BasedOn="{StaticResource TextEditDataGridCellRegular}"
        TargetType="TextBox">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>

    <Style x:Key="TextDataGridCellCustom" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="LineHeight" Value="1" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Foreground" Value="{StaticResource Black90}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Status}" Value="false">
                <Setter Property="TextDecorations" Value="Strikethrough" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCellRegular" TargetType="DataGridCell">
        <Setter Property="Padding" Value="40" />
        <Setter Property="BorderThickness" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource HawkesBlue}" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ButtonPrimary"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="Button">
        <Setter Property="Background" Value="{StaticResource SecondaryBlue}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="{StaticResource MontserratSemiBold}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Height" Value="45px" />
        <Setter Property="md:ButtonAssist.CornerRadius" Value="25" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />

                            </Grid>
                        </AdornerDecorator>
                        <wpf:Ripple
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <wpf:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </wpf:Ripple.Clip>
                        </wpf:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                            <Setter Property="Background" Value="{StaticResource LochmaraDarker}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource Black50}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{StaticResource SecondarySofter}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonPrimary2"
        BasedOn="{StaticResource MaterialDesignRaisedButton}"
        TargetType="Button">
        <Setter Property="Background" Value="{StaticResource SecondaryBlue}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="{StaticResource MontserratSemiBold}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Height" Value="45px" />
        <Setter Property="md:ButtonAssist.CornerRadius" Value="25" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="20" />

                            </Grid>
                        </AdornerDecorator>
                        <wpf:Ripple
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <wpf:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </wpf:Ripple.Clip>
                        </wpf:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                            <Setter Property="Background" Value="{StaticResource LochmaraDarker}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource Black50}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{StaticResource SecondarySofter}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonPrimarySmall"
        BasedOn="{StaticResource ButtonPrimary}"
        TargetType="Button">
        <Setter Property="Height" Value="30px" />
        <Setter Property="FontSize" Value="10px" />
        <Setter Property="md:ButtonAssist.CornerRadius" Value="18" />
    </Style>

    <Style
        x:Key="ButtonSecondary"
        BasedOn="{StaticResource ButtonPrimary}"
        TargetType="Button">
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="{StaticResource SecondaryBlue}" />
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />

                            </Grid>
                        </AdornerDecorator>
                        <wpf:Ripple
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <wpf:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </wpf:Ripple.Clip>
                        </wpf:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                            <Setter Property="Background" Value="{StaticResource LochmaraDarker}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource Black50}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{StaticResource Foam}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonSecondary2F14"
        BasedOn="{StaticResource ButtonSecondary}"
        TargetType="Button">
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style
        x:Key="ButtonSecondary2"
        BasedOn="{StaticResource ButtonPrimary}"
        TargetType="Button">
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="{StaticResource SecondaryBlue}" />
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBlue}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="18" />

                            </Grid>
                        </AdornerDecorator>
                        <wpf:Ripple
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <wpf:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </wpf:Ripple.Clip>
                        </wpf:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                            <Setter Property="Background" Value="{StaticResource LochmaraDarker}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource Black50}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{StaticResource Foam}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonSecondarySmall"
        BasedOn="{StaticResource ButtonSecondary}"
        TargetType="Button">
        <Setter Property="Height" Value="30px" />
        <Setter Property="FontSize" Value="10px" />
        <Setter Property="md:ButtonAssist.CornerRadius" Value="18" />
    </Style>

    <Style
        x:Key="ButtonSecondarySmall1"
        BasedOn="{StaticResource ButtonSecondary}"
        TargetType="Button">
        <Setter Property="Height" Value="30px" />
        <Setter Property="FontSize" Value="10px" />
        <Setter Property="md:ButtonAssist.CornerRadius" Value="18" />
        <Setter Property="Background" Value="{StaticResource SecondaryBlue}" />
    </Style>

    <Style
        x:Key="ButtonSecondaryTransparentSmall"
        BasedOn="{StaticResource ButtonSecondarySmall}"
        TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border
                                    x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />

                            </Grid>
                        </AdornerDecorator>
                        <wpf:Ripple
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <wpf:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </wpf:Ripple.Clip>
                        </wpf:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                            <Setter Property="Background" Value="{StaticResource LochmaraDarker}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource Black50}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{StaticResource LochmaraDarker}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="14,0,0,0"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style BasedOn="{StaticResource MaterialDesignDarkCheckBox}" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Click">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Viewbox
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:CheckBoxAssist.CheckBoxSize)}"
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:CheckBoxAssist.CheckBoxSize)}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            FlowDirection="LeftToRight">
                            <Canvas Width="24" Height="24">
                                <Path
                                    x:Name="Graphic"
                                    Data="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"
                                    Fill="{DynamicResource MaterialDesignCheckBoxOff}" />
                                <Ellipse
                                    x:Name="InteractionEllipse"
                                    Canvas.Left="12"
                                    Canvas.Top="12"
                                    Width="0"
                                    Height="0"
                                    Fill="{TemplateBinding Foreground}"
                                    IsHitTestVisible="False"
                                    Opacity="0"
                                    RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ButtonBase.Click">
                            <BeginStoryboard Storyboard="{StaticResource Click}" />
                        </EventTrigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
                            <Setter Property="Padding" Value="4,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" />
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Graphic" Property="Data" Value="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
                            <Setter TargetName="Graphic" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Graphic" Property="Fill" Value="{DynamicResource MaterialDesignCheckBoxDisabled}" />
                            <Setter Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="Graphic" Property="Data" Value="M6,13L6,11L18,11L18,13M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z" />
                            <Setter TargetName="Graphic" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter TargetName="Graphic" Property="Fill" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                            <Setter TargetName="contentPresenter" Property="Control.Foreground" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Graphic" Property="Fill" Value="{DynamicResource PrimaryHueLightBrush}" />
                                <Setter Property="Opacity" Value="1" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ButtonPlain"
        BasedOn="{StaticResource ButtonPrimary}"
        TargetType="Button">
        <Setter Property="md:ButtonAssist.CornerRadius" Value="0" />
        <Setter Property="Background" Value="{x:Null}" />
    </Style>

    <Style
        x:Key="ButtonPlain1"
        BasedOn="{StaticResource ButtonPrimary}"
        TargetType="Button">
        <Setter Property="md:ButtonAssist.CornerRadius" Value="0" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Padding" Value="10,4" />
    </Style>

    <Style x:Key="OutlinedComboBox" TargetType="ComboBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border
                        BorderBrush="{Binding ElementName=ComboBoxElement, Path=BorderBrush}"
                        BorderThickness="1px"
                        CornerRadius="3">
                        <ComboBox x:Name="ComboBoxElement" Margin="7" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BorderForComboBox" TargetType="Border">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="3" />
        <Setter Property="Padding" Value="15,5" />
    </Style>


    <!--  Scrollbar Thumbs  -->
    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle
                            Width="Auto"
                            Height="Auto"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Fill="Transparent" />
                        <Border
                            x:Name="Rectangle1"
                            Width="Auto"
                            Height="Auto"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            CornerRadius="10" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                            <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ScrollBars  -->
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{StaticResource PigeonPost}" />
        <Setter Property="Background" Value="{StaticResource JaggedIce}" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid
                        x:Name="GridRoot"
                        Width="8"
                        Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>

                        <Track
                            x:Name="PART_Track"
                            Grid.Row="0"
                            Focusable="false"
                            IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb
                                    x:Name="Thumb"
                                    Background="{TemplateBinding Foreground}"
                                    Style="{DynamicResource ScrollThumbs}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton
                                    x:Name="PageUp"
                                    Command="ScrollBar.PageDownCommand"
                                    Focusable="false"
                                    Opacity="0" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton
                                    x:Name="PageDown"
                                    Command="ScrollBar.PageUpCommand"
                                    Focusable="false"
                                    Opacity="0" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource ButtonSelectBrush}" />
                        </Trigger>
                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                            <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width" Value="Auto" />
                            <Setter Property="Height" Value="12" />
                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Context Menu  -->
    <Style x:Key="ContextMenuRegular" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border
                        x:Name="Border"
                        Background="White"
                        BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="LightGray" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="8,8" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="-25,10,0,11" />
    </Style>

    <Style x:Key="MenuItemRegular" TargetType="{x:Type MenuItem}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        x:Name="MenuItemText"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Foreground="{StaticResource Black100}"
                        Style="{StaticResource CaptionFormIdleSmaller}"
                        Text="{Binding}"/>
                    <DataTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MenuItemText" Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border" Padding="3">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    Name="Icon"
                    Width="18"
                    Margin="9,0,6,0"
                    VerticalAlignment="Center"
                    ContentSource="Icon" />
                <ContentPresenter
                    Name="HeaderHost"
                    Grid.Column="1"
                    HorizontalAlignment="Left"
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
                <TextBlock
                    x:Name="InputGestureText"
                    Grid.Column="2"
                    Margin="5,2,2,2"
                    DockPanel.Dock="Right"
                    FontSize="10"
                    Text="{TemplateBinding InputGestureText}" />
                <Path
                    Grid.Column="3"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M 0 0 L 0 7 L 4 3.5 Z"
                    Fill="#0f3c5a" />
                <Popup
                    Name="Popup"
                    AllowsTransparency="True"
                    Focusable="False"
                    HorizontalOffset="-4"
                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                    Placement="Right"
                    PopupAnimation="Fade">
                    <Border
                        Name="SubmenuBorder"
                        Background="White"
                        BorderBrush="LightGray"
                        BorderThickness="1"
                        SnapsToDevicePixels="True">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#96daff" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Gray}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="MenuItemReverse"
        BasedOn="{StaticResource MenuItemRegular}"
        TargetType="{x:Type MenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border Name="Border" Padding="3">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
                                Name="HeaderHost"
                                Margin="20,0,0,0"
                                HorizontalAlignment="Right"
                                ContentSource="Header"
                                RecognizesAccessKey="True" />
                            <ContentPresenter
                                Name="Icon"
                                Grid.Column="1"
                                Width="18"
                                Margin="9,0,3,0"
                                VerticalAlignment="Center"
                                ContentSource="Icon" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#96daff" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource Gray}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  End Context Menu  -->

    <Style x:Key="BtnWrapper" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="Transparent"
                        BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{StaticResource HippieBlue}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExpanderToggle" TargetType="ToggleButton">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Margin="0,8">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="HeaderContent" ContentSource="Content" />
                        <Border
                            Grid.Column="1"
                            Height="20"
                            Padding="5,0,5,0"
                            Background="Transparent"
                            CornerRadius="5">
                            <md:PackIcon
                                x:Name="ExpanderIcon"
                                Width="16"
                                Margin="0"
                                Foreground="Black"
                                Kind="ChevronDown" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  Change the sign to minus when toggled  -->
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ExpanderIcon" Property="Kind" Value="ChevronUp" />
                        </Trigger>

                        <!--  MouseOver, Pressed behaviours  -->
                        <Trigger Property="IsMouseOver" Value="true" />
                        <Trigger Property="IsPressed" Value="true" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderTableToggle" TargetType="ToggleButton">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="{StaticResource Black20}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <!--<Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>-->
                        <ContentPresenter x:Name="HeaderContent" ContentSource="Content" />
                        <Border
                            Grid.Column="1"
                            Padding="6,0"
                            HorizontalAlignment="Left"
                            Background="Transparent"
                            CornerRadius="5">
                            <md:PackIcon
                                x:Name="ExpanderIcon"
                                Width="18"
                                Height="18"
                                Margin="0"
                                VerticalAlignment="Center"
                                Foreground="{StaticResource SecondaryBlue}"
                                Kind="ChevronDown" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  Change the sign to minus when toggled  -->
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ExpanderIcon" Property="Kind" Value="ChevronRight" />
                        </Trigger>

                        <!--  MouseOver, Pressed behaviours  -->
                        <Trigger Property="IsMouseOver" Value="true" />
                        <Trigger Property="IsPressed" Value="true" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBaseToggle" TargetType="ToggleButton">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Margin="0,8">
                        <ContentPresenter
                            x:Name="HeaderContent"
                            HorizontalAlignment="Center"
                            ContentSource="Content" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="HeaderContent" Property="TextBlock.Foreground" Value="{StaticResource Astronaut}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="HeaderContent" Property="TextBlock.Foreground" Value="{StaticResource Gray50}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true" />
                        <Trigger Property="IsPressed" Value="true" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderBtn" TargetType="Expander">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{StaticResource MontserratSemiBold}" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">

                    <Border BorderBrush="{StaticResource Gray70}" BorderThickness="0,0,0,1">
                        <DockPanel>
                            <ToggleButton
                                x:Name="ExpanderButton"
                                Padding="1.5,0"
                                Content="{TemplateBinding Header}"
                                DockPanel.Dock="Top"
                                IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                OverridesDefaultStyle="True"
                                Style="{StaticResource ExpanderToggle}" />
                            <ContentPresenter
                                x:Name="ExpanderContent"
                                Grid.Row="1"
                                DockPanel.Dock="Bottom"
                                Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HippieBlue}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExpanderTable" TargetType="Expander">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{StaticResource MontserratSemiBold}" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border>
                        <DockPanel>
                            <ToggleButton
                                x:Name="ExpanderButton"
                                Padding="1.5,0"
                                Content="{TemplateBinding Header}"
                                DockPanel.Dock="Top"
                                IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                OverridesDefaultStyle="True"
                                Style="{StaticResource ExpanderTableToggle}" />
                            <ContentPresenter
                                x:Name="ExpanderContent"
                                Grid.Row="1"
                                DockPanel.Dock="Bottom"
                                Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HippieBlue}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExpanderMenu" TargetType="Expander">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border
                        Margin="0,0,0,-8"
                        BorderBrush="{StaticResource Nepal}"
                        BorderThickness="0,0,0,0">
                        <DockPanel>
                            <ToggleButton
                                x:Name="ExpanderButton"
                                Padding="1.5,0"
                                Content="{TemplateBinding Header}"
                                DockPanel.Dock="Top"
                                IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                OverridesDefaultStyle="True"
                                Style="{StaticResource ExpanderToggle}" />
                            <ContentPresenter
                                x:Name="ExpanderContent"
                                Grid.Row="1"
                                Margin="0,-10,0,10"
                                DockPanel.Dock="Bottom"
                                Visibility="Collapsed" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource HippieBlue}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FilterExpander" TargetType="{x:Type Expander}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource Alto}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Margin" Value="17,0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border
                        Background="{StaticResource Black10}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4">
                        <DockPanel Background="{TemplateBinding Background}">
                            <ToggleButton
                                Name="HeaderSite"
                                Margin="17,10,17,8"
                                BorderThickness="0"
                                ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                Cursor="Hand"
                                DockPanel.Dock="Top"
                                Focusable="False"
                                Foreground="{TemplateBinding Foreground}"
                                IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                IsTabStop="False"
                                Opacity="0.87"
                                Style="{StaticResource MaterialDesignHorizontalHeaderStyle}"
                                TextElement.FontSize="13">
                                <TextBlock Style="{StaticResource Title}" Text="{TemplateBinding Header}" />
                            </ToggleButton>
                            <Border Name="ContentSite">
                                <Border.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ContentSiteScaleTransform" />
                                    </TransformGroup>
                                </Border.LayoutTransform>

                                <Grid
                                    Name="ContentPanel"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <ContentPresenter
                                        Name="PART_Content"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        Focusable="False" />
                                </Grid>
                            </Border>

                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">

                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Expanded">
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="ContentPanel"
                                                Storyboard.TargetProperty="Opacity"
                                                From="0"
                                                To="1"
                                                Duration="{StaticResource ExpandDuration}" />
                                            <DoubleAnimation
                                                Storyboard.TargetName="ContentSiteScaleTransform"
                                                Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                From="0"
                                                To="1"
                                                Duration="{StaticResource ExpandDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>

                                    <VisualTransition To="Collapsed">
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="ContentPanel"
                                                Storyboard.TargetProperty="Opacity"
                                                From="1"
                                                To="0"
                                                Duration="{StaticResource CollapseDuration}" />
                                            <DoubleAnimation
                                                Storyboard.TargetName="ContentSiteScaleTransform"
                                                Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                From="1"
                                                To="0"
                                                Duration="{StaticResource CollapseDuration}">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ContentPanel"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="ContentSiteScaleTransform"
                                            Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                            To="1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ContentPanel"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="ContentSiteScaleTransform"
                                            Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>

                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignVerticalHeaderStyle}" />
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignVerticalHeaderStyle}" />
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignHorizontalHeaderStyle}" />
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Top" />
                            <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignHorizontalHeaderStyle}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PasswordBoxInputDefault" TargetType="PasswordBox">
        <Setter Property="BorderBrush" Value="{StaticResource Nepal}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource EbonyClay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                Focusable="false"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="border" Property="BorderThickness" Value="1" />
                                <Setter TargetName="border" Property="BorderBrush" Value="Red" />
                                <Setter TargetName="border" Property="CornerRadius" Value="2" />
                            </Trigger.Setters>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{StaticResource Grey01}" />
                            <Setter Property="Background" Value="#F6F6F6" />
                            <Setter Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxInputForm" TargetType="TextBox">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="BorderBrush" Value="{StaticResource Nepal}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource EbonyClay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                Focusable="false"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Trigger.Setters>
                                <Setter TargetName="border" Property="BorderThickness" Value="1" />
                                <Setter TargetName="border" Property="BorderBrush" Value="Red" />
                                <Setter TargetName="border" Property="CornerRadius" Value="2" />
                            </Trigger.Setters>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="{StaticResource Grey01}" />
                            <Setter Property="Background" Value="#F6F6F6" />
                            <Setter Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="TextBoxInputForm14"
        BasedOn="{StaticResource TextBoxInputForm}"
        TargetType="TextBox">
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style
        x:Key="TextBoxInputForm22"
        BasedOn="{StaticResource TextBoxInputForm}"
        TargetType="TextBox">
        <Setter Property="FontSize" Value="22" />
    </Style>

    <Style
        x:Key="TextBoxInputForm20"
        BasedOn="{StaticResource TextBoxInputForm}"
        TargetType="TextBox">
        <Setter Property="FontSize" Value="20" />
    </Style>

    <Style
        x:Key="TextBoxInputForm18"
        BasedOn="{StaticResource TextBoxInputForm}"
        TargetType="TextBox">
        <Setter Property="FontSize" Value="18" />
    </Style>

    <Style x:Key="TextBoxPlaceholder" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="Foreground" Value="{StaticResource Nepal}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Grid.ZIndex" Value="10" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="Margin" Value="10,0,5,0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="TextBoxPlaceholder18"
        BasedOn="{StaticResource TextBoxPlaceholder}"
        TargetType="TextBlock">
        <Setter Property="FontSize" Value="18" />
    </Style>

    <Style
        x:Key="DarkCheckBox13"
        BasedOn="{StaticResource MaterialDesignDarkCheckBox}"
        TargetType="CheckBox">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="#646464" />
    </Style>

    <Style
        x:Key="MultiLineTextBoxPlaceholder"
        BasedOn="{StaticResource TextBoxPlaceholder}"
        TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="8,6,8,0" />
    </Style>

    <Style x:Key="ComboBoxInputForm" TargetType="ComboBox">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="{StaticResource Black90}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource Nepal}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ToggleButton
                                Name="ToggleButton"
                                Grid.Column="0"
                                Margin="0,2,0,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                ClickMode="Press"
                                Focusable="true"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                Style="{StaticResource MaterialDesignExpanderToggleButton}">
                                <ToggleButton.RenderTransform>
                                    <ScaleTransform ScaleX="-1" />
                                </ToggleButton.RenderTransform>
                            </ToggleButton>

                            <ContentPresenter
                                Name="ContentSite"
                                Grid.Column="0"
                                Margin="4,0,19,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" />

                            <TextBox
                                x:Name="PART_EditableTextBox"
                                Margin="3,3,23,3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="True"
                                FontSize="10"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{x:Null}"
                                Visibility="Collapsed" />

                            <Popup
                                Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">

                                <Grid
                                    Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="White"
                                        BorderBrush="LightGray"
                                        BorderThickness="1" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter TargetName="border" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{StaticResource Black50}" />
                            <Setter Property="Background" Value="#F6F6F6" />
                            <Setter Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="2" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger SourceName="ContentSite" Property="IsFocused" Value="true">
                            <Setter Property="IsDropDownOpen" Value="true" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxCenterContentInputForm" TargetType="ComboBox">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="{StaticResource Black90}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource Nepal}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ToggleButton
                                Name="ToggleButton"
                                Grid.Column="0"
                                Margin="0,2,0,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                ClickMode="Press"
                                Focusable="true"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                Style="{StaticResource MaterialDesignExpanderToggleButton}">
                                <ToggleButton.RenderTransform>
                                    <ScaleTransform ScaleX="-1" />
                                </ToggleButton.RenderTransform>
                            </ToggleButton>

                            <ContentPresenter
                                Name="ContentSite"
                                Grid.Column="0"
                                Margin="4,0,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" />

                            <TextBox
                                x:Name="PART_EditableTextBox"
                                Margin="3,3,23,3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="True"
                                FontSize="10"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{x:Null}"
                                Visibility="Collapsed" />

                            <Popup
                                Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">

                                <Grid
                                    Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="White"
                                        BorderBrush="LightGray"
                                        BorderThickness="1" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter TargetName="border" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{StaticResource Black50}" />
                            <Setter Property="Background" Value="#F6F6F6" />
                            <Setter Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="2" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger SourceName="ContentSite" Property="IsFocused" Value="true">
                            <Setter Property="IsDropDownOpen" Value="true" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxInputFormPagination" TargetType="ComboBox">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="#242424" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource Nepal}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ToggleButton
                                Name="ToggleButton"
                                Grid.Column="0"
                                Margin="0,0,0,0"
                                HorizontalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                ClickMode="Press"
                                Focusable="true"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                Style="{StaticResource MaterialDesignExpanderToggleButton}">
                                <ToggleButton.RenderTransform>
                                    <ScaleTransform ScaleX="-1" />
                                </ToggleButton.RenderTransform>
                            </ToggleButton>

                            <ContentPresenter
                                Name="ContentSite"
                                Grid.Column="0"
                                Margin="6,1,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" />

                            <TextBox
                                x:Name="PART_EditableTextBox"
                                Margin="3,3,23,3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="True"
                                FontSize="10"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{x:Null}"
                                Visibility="Collapsed" />

                            <Popup
                                Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">

                                <Grid
                                    Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="White"
                                        BorderBrush="LightGray"
                                        BorderThickness="1" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter TargetName="border" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{StaticResource Black50}" />
                            <Setter Property="Background" Value="#F6F6F6" />
                            <Setter Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="2" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger SourceName="ContentSite" Property="IsFocused" Value="true">
                            <Setter Property="IsDropDownOpen" Value="true" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxInputForm2" TargetType="ComboBox">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="45" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="#028DDB" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#028DDB" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ToggleButton
                                Name="ToggleButton"
                                Grid.Column="0"
                                Margin="0,10,5,0"
                                HorizontalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                ClickMode="Press"
                                Focusable="true"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                Style="{StaticResource MaterialDesignExpanderToggleButton}">
                                <ToggleButton.RenderTransform>
                                    <ScaleTransform ScaleX="-1" />
                                </ToggleButton.RenderTransform>
                            </ToggleButton>

                            <ContentPresenter
                                Name="ContentSite"
                                Grid.Column="0"
                                Margin="15,0,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" />

                            <TextBox
                                x:Name="PART_EditableTextBox"
                                Margin="3,3,23,3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="True"
                                FontSize="10"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{x:Null}"
                                Visibility="Collapsed" />

                            <Popup
                                Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">

                                <Grid
                                    Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="White"
                                        BorderBrush="LightGray"
                                        BorderThickness="1" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter TargetName="border" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Red" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{StaticResource Black50}" />
                            <Setter Property="Background" Value="#F6F6F6" />
                            <Setter Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="2" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger SourceName="ContentSite" Property="IsFocused" Value="true">
                            <Setter Property="IsDropDownOpen" Value="true" />
                            <Setter Property="Foreground" Value="Red" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxSelectOverlay" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="Grid.ZIndex" Value="10" />
        <Setter Property="Foreground" Value="DarkGray" />
        <Setter Property="Margin" Value="5,5,8,0" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxInputFormBlue" TargetType="ComboBox">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{StaticResource BaseApp}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1.5" />
        <Setter Property="BorderBrush" Value="{StaticResource BaseApp}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ToggleButton
                                Name="ToggleButton"
                                Grid.Column="0"
                                Margin="0,2,0,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Background}"
                                Foreground="{StaticResource SecondaryDarker}"
                                BorderThickness="0"
                                ClickMode="Press"
                                Focusable="true"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                RenderTransformOrigin="0.5,0.5"
                                Style="{StaticResource MaterialDesignExpanderToggleButton}">
                                <ToggleButton.RenderTransform>
                                    <ScaleTransform ScaleX="-1" />
                                </ToggleButton.RenderTransform>
                            </ToggleButton>

                            <ContentPresenter
                                Name="ContentSite"
                                Grid.Column="0"
                                Margin="10,2,19,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                IsHitTestVisible="False" />

                            <TextBox
                                x:Name="PART_EditableTextBox"
                                Margin="3,3,23,3"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="True"
                                FontSize="10"
                                IsReadOnly="{TemplateBinding IsReadOnly}"
                                Style="{x:Null}"
                                Visibility="Collapsed" />

                            <Popup
                                Name="Popup"
                                AllowsTransparency="True"
                                Focusable="False"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                Placement="Bottom"
                                PopupAnimation="Slide">

                                <Grid
                                    Name="DropDown"
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="DropDownBorder"
                                        Background="White"
                                        BorderBrush="LightGray"
                                        BorderThickness="1" />
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter TargetName="border" Property="BorderThickness" Value="2" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="{StaticResource Black50}" />
                            <Setter Property="Background" Value="#F6F6F6" />
                            <Setter Property="Foreground" Value="{StaticResource Black50}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="2" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger SourceName="ContentSite" Property="IsFocused" Value="true">
                            <Setter Property="IsDropDownOpen" Value="true" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckStyleRegular" TargetType="CheckBox">
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Margin" Value="0,10,0,0" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="Foreground" Value="{StaticResource Astronaut}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="16"
                                Height="16"
                                Margin="8,0,0,0"
                                Background="White"
                                BorderBrush="{StaticResource Nepal}"
                                BorderThickness="1"
                                CornerRadius="2">
                                <Grid>
                                    <Path
                                        x:Name="CheckMark"
                                        Width="10"
                                        Height="8"
                                        Data="M 1 4 L 4 7 9 1"
                                        SnapsToDevicePixels="False"
                                        Stroke="White"
                                        StrokeThickness="2"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="16,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckStyleRegularNoMargin" TargetType="CheckBox">
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="Foreground" Value="{StaticResource Astronaut}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="16"
                                Height="16"
                                Margin="0,0,0,0"
                                Background="White"
                                BorderBrush="{StaticResource Nepal}"
                                BorderThickness="1"
                                CornerRadius="2">
                                <Grid>
                                    <Path
                                        x:Name="CheckMark"
                                        Width="10"
                                        Height="8"
                                        Data="M 1 4 L 4 7 9 1"
                                        SnapsToDevicePixels="False"
                                        Stroke="White"
                                        StrokeThickness="2"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="5,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckStyleRegularDisable" TargetType="CheckBox">
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Margin" Value="0,10,0,0" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="Foreground" Value="{StaticResource Astronaut}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="16"
                                Height="16"
                                Margin="8,0,0,0"
                                Background="White"
                                BorderBrush="{StaticResource Nepal}"
                                BorderThickness="1"
                                CornerRadius="2">
                                <Grid>
                                    <Path
                                        x:Name="CheckMark"
                                        Width="10"
                                        Height="8"
                                        Data="M 1 4 L 4 7 9 1"
                                        SnapsToDevicePixels="False"
                                        Stroke="White"
                                        StrokeThickness="2"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="16,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DoveGray}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DoveGray}" />

                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckStyleBlueDisable" TargetType="CheckBox">
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="Foreground" Value="{StaticResource Astronaut}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="16"
                                Height="16"
                                Margin="2,0,0,0"
                                Background="White"
                                BorderBrush="{StaticResource Nepal}"
                                BorderThickness="1"
                                CornerRadius="2">
                                <Grid>
                                    <Path
                                        x:Name="CheckMark"
                                        Width="10"
                                        Height="8"
                                        Data="M 1 4 L 4 7 9 1"
                                        SnapsToDevicePixels="False"
                                        Stroke="White"
                                        StrokeThickness="2"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="10,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource SecondaryBlue}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource SecondaryBlue}" />

                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FilterCheckBox" TargetType="CheckBox">
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="#4E5153" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="14"
                                Height="14"
                                Background="White"
                                BorderBrush="{StaticResource Nepal}"
                                BorderThickness="1"
                                CornerRadius="2">
                                <Grid>
                                    <Path
                                        x:Name="CheckMark"
                                        Width="10"
                                        Height="8"
                                        Data="M 1 4 L 4 7 9 1"
                                        SnapsToDevicePixels="False"
                                        Stroke="White"
                                        StrokeThickness="2"
                                        Visibility="Collapsed" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="8,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Lochmara}" />
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#F6F6F6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="lvc:Axis">
        <Setter Property="FontSize" Value="10" />
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="Foreground" Value="{StaticResource DoveGray}" />
    </Style>

    <Style TargetType="lvc:Separator">
        <Setter Property="StrokeThickness" Value="1" />
        <Setter Property="Stroke" Value="{StaticResource Gray70}" />
    </Style>

    <Style x:Key="HorizontalChartSeparator" TargetType="lvc:Separator">
        <Style.Triggers>
            <Trigger Property="AxisOrientation" Value="Y">
                <Setter Property="IsEnabled" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="VerticalChartSeparator" TargetType="lvc:Separator">
        <Style.Triggers>
            <Trigger Property="AxisOrientation" Value="X">
                <Setter Property="IsEnabled" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="DefaultDatePicker"
        BasedOn="{StaticResource MaterialDesignOutlinedDatePicker}"
        TargetType="DatePicker">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                            <Grid Background="Transparent">
                                <Viewbox>
                                    <Canvas Width="24" Height="24">
                                        <Path Data="M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1M17,12H12V17H17V12Z" Fill="{TemplateBinding Foreground}" />
                                    </Canvas>
                                </Viewbox>
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <DatePickerTextBox
                            x:Name="PART_TextBox"
                            Grid.Row="0"
                            Margin="8,0,0,0"
                            Padding="6,0,8,0"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="Center"
                            wpf:HintAssist.Background="Red"
                            wpf:HintAssist.FloatingOffset="{Binding Path=(wpf:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:HintAssist.FloatingScale="{Binding Path=(wpf:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:HintAssist.Foreground="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:HintAssist.HelperText="{Binding Path=(wpf:HintAssist.HelperText), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:HintAssist.Hint="{Binding Path=(wpf:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:HintAssist.HintOpacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:HintAssist.IsFloating="{Binding Path=(wpf:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.DecorationVisibility="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.HasClearButton="{Binding Path=(wpf:TextFieldAssist.HasClearButton), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.HasFilledTextField="{Binding Path=(wpf:TextFieldAssist.HasFilledTextField), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.HasOutlinedTextField="{Binding Path=(wpf:TextFieldAssist.HasOutlinedTextField), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.NewSpecHighlightingEnabled="{Binding Path=(wpf:TextFieldAssist.NewSpecHighlightingEnabled), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.PrefixText="{Binding Path=(wpf:TextFieldAssist.PrefixText), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.RippleOnFocusEnabled="{Binding Path=(wpf:TextFieldAssist.RippleOnFocusEnabled), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.SuffixText="{Binding Path=(wpf:TextFieldAssist.SuffixText), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.TextBoxViewMargin="{Binding Path=(wpf:TextFieldAssist.TextBoxViewMargin), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.TextFieldCornerRadius="{Binding Path=(wpf:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.UnderlineBrush="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}"
                            wpf:TextFieldAssist.UnderlineCornerRadius="{Binding Path=(wpf:TextFieldAssist.UnderlineCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="{TemplateBinding Focusable}"
                            IsEnabled="False"
                            Style="{DynamicResource MaterialDesignDatePickerTextBox}"
                            Text="{Binding Path=SelectedDate, StringFormat='dd MMMM yyyy', ConverterCulture='id-ID', RelativeSource={RelativeSource AncestorType={x:Type DatePicker}}}" />
                        <Button
                            x:Name="PART_Button"
                            Height="17"
                            Margin="4,0,0,-3"
                            Padding="0"
                            HorizontalAlignment="Right"
                            Focusable="False"
                            Foreground="{TemplateBinding BorderBrush}"
                            Template="{StaticResource DropDownButtonTemplate}" />
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            CustomPopupPlacementCallback="{x:Static wpf:CustomPopupPlacementCallbackHelper.LargePopupCallback}"
                            Placement="Custom"
                            PlacementTarget="{Binding ElementName=PART_TextBox}"
                            PopupAnimation="Fade"
                            StaysOpen="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter TargetName="PART_TextBox" Property="Padding" Value="10,-5,22,-5" />
                            <Setter TargetName="PART_Button" Property="Margin" Value="4,0,12,-3" />
                            <Setter TargetName="PART_Button" Property="Height" Value="20" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter TargetName="PART_TextBox" Property="Padding" Value="10,-5,22,-5" />
                            <Setter TargetName="PART_Button" Property="Margin" Value="4,0,12,-3" />
                            <Setter TargetName="PART_Button" Property="Height" Value="20" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Button" Property="Margin" Value="4,0,0,-15" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Button" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter TargetName="PART_TextBox" Property="wpf:ValidationAssist.HasError" Value="True" />
                            <Setter TargetName="PART_Button" Property="Foreground" Value="{DynamicResource ValidationErrorBrush}" />
                        </Trigger>
                        <Trigger Property="wpf:CalendarAssist.IsHeaderVisible" Value="False">
                            <Setter Property="CalendarStyle">
                                <Setter.Value>
                                    <Style BasedOn="{StaticResource MaterialDesignDatePickerCalendarPortrait}" TargetType="Calendar">
                                        <Setter Property="wpf:CalendarAssist.IsHeaderVisible" Value="False" />
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_TextBox" Property="BorderBrush" Value="{StaticResource Grey01}" />
                            <Setter TargetName="PART_Root" Property="Background" Value="#F6F6F6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderButtonPlusMinus" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter
                            x:Name="HeaderContent"
                            Grid.Column="0"
                            ContentSource="Content" />
                        <Image
                            x:Name="ExpanderIcon"
                            Grid.Column="1"
                            Width="16"
                            Cursor="Hand"
                            Source="/SiPintar;component/Assets/Images/Action/ic_add.png" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  Change the sign to minus when toggled  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpanderIcon" Property="Source" Value="/SiPintar;component/Assets/Images/Action/ic_subtract.png" />
                        </Trigger>

                        <!--  MouseOver, Pressed behaviours  -->
                        <Trigger Property="IsMouseOver" Value="true" />
                        <Trigger Property="IsPressed" Value="true" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderPlusMinus" TargetType="Expander">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <DockPanel>
                        <ToggleButton
                            x:Name="ExpanderButton"
                            Padding="1.5,0"
                            Content="{TemplateBinding Header}"
                            DockPanel.Dock="Top"
                            IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                            OverridesDefaultStyle="True"
                            Style="{StaticResource ExpanderButtonPlusMinus}" />
                        <ContentPresenter
                            x:Name="ExpanderContent"
                            Grid.Row="1"
                            DockPanel.Dock="Bottom"
                            Visibility="Collapsed" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonNavStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryBlue}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="10,10" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="md:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="md:RippleAssist.ClipToBounds" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Button
                        x:Name="Btn"
                        Content="{TemplateBinding Content}"
                        Foreground="{TemplateBinding Foreground}"
                        Style="{StaticResource ButtonSecondaryTransparentSmall}" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#ffffff" />
                            <Setter TargetName="Btn" Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#ffffff" />
                            <Setter TargetName="Btn" Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextOnlyRadio" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource Gray100}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Button
                        x:Name="Btn"
                        Height="{TemplateBinding Height}"
                        Margin="{TemplateBinding Margin}"
                        Content="{TemplateBinding Content}"
                        Foreground="{TemplateBinding Foreground}"
                        Style="{StaticResource BtnWrapper}" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Btn" Property="Foreground" Value="{StaticResource SecondaryBlue}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Btn" Property="Foreground" Value="{DynamicResource Astronaut}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SubmenuText" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource MontserratMedium}" />
        <Setter Property="FontSize" Value="11.5" />
        <Setter Property="Foreground" Value="{StaticResource Astronaut}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="10,0,0,10" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CeruleanActive}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SubMenuSistemKontrol" TargetType="RadioButton">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <BulletDecorator Background="Transparent" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Width="0" Height="0">
                                <Border
                                    Name="RadioOuter"
                                    Background="Transparent"
                                    BorderBrush="Gainsboro"
                                    BorderThickness="2"
                                    CornerRadius="2" />
                                <Border
                                    Name="RadioMark"
                                    Margin="4"
                                    Background="#FFADADAD"
                                    CornerRadius="0"
                                    Visibility="Hidden" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--  Text element  -->
                        <Border
                            x:Name="Wrapper"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{StaticResource Gray}"
                            BorderThickness="0.4,0.4,0.4,0"
                            CornerRadius="4 4 0 0">
                            <Grid Margin="0,10,10,0">
                                <TextBlock
                                    x:Name="Label"
                                    HorizontalAlignment="Center"
                                    Foreground="{StaticResource Astronaut}"
                                    Style="{StaticResource SubmenuText}"
                                    Text="{TemplateBinding Content}" />
                                <ContentPresenter Visibility="Collapsed" />
                            </Grid>
                        </Border>
                    </BulletDecorator>
                    <!--  If item is checked, trigger the visibility of the mark  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Label" Property="Foreground" Value="{StaticResource CeruleanActive}" />
                            <Setter TargetName="Label" Property="FontFamily" Value="{StaticResource SarabunSemiBold}" />
                            <Setter TargetName="Label" Property="FontWeight" Value="Bold" />
                            <Setter TargetName="Wrapper" Property="Background" Value="White" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="Label" Property="Foreground" Value="{StaticResource Astronaut}" />
                            <Setter TargetName="Label" Property="FontFamily" Value="{StaticResource SarabunRegular}" />
                            <Setter TargetName="Label" Property="FontWeight" Value="Regular" />
                            <Setter TargetName="Wrapper" Property="Background" Value="Transparent" />
                            <Setter TargetName="Wrapper" Property="BorderThickness" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextDataGridCellGray" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource SarabunRegular}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Foreground" Value="{StaticResource Black70}" />
    </Style>

    <Style x:Key="ProgressBarDefault" TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="IsIndeterminateStoryboard" TargetName="RotateTransform" TargetProperty="Angle" RepeatBehavior="Forever">
                            <DoubleAnimation From="0" To="359" Duration="0:0:2" />
                        </Storyboard>
                        <Storyboard x:Key="IsFullyIndeterminateStoryboard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FullyIndeterminateGridScaleTransform"
                                                           Storyboard.TargetProperty="ScaleX"
                                                           RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0.0" />
                                <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" />
                                <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0.0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimation Storyboard.TargetName="RotateTransform"
                                             Storyboard.TargetProperty="Angle" 
                                             RepeatBehavior="Forever"
                                             From="00" To="359" Duration="0:0:1.25" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot" ClipToBounds="False">
                        <Grid x:Name="FullyIndeterminateGrid">
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="FullyIndeterminateGridScaleTransform" ScaleX="0" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="PathGrid" Margin="2" />
                        <Canvas>
                            <Ellipse Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
                            <Path x:Name="Path" Stroke="{TemplateBinding Foreground}" StrokeThickness="1.5" 
                                  Canvas.Top="2" Canvas.Left="2"
                                  RenderTransformOrigin="0, 0">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource StartPointConverter}, Mode=OneWay}">
                                            <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource ArcSizeConverter}, Mode=OneWay}"
                                                        SweepDirection="Clockwise">
                                                <ArcSegment.Point>
                                                    <MultiBinding 
                                                        Converter="{StaticResource ArcEndPointConverter}" 
                                                        ConverterParameter="{x:Static circularProgressBar:ArcEndPointConverter.ParameterMidPoint}">
                                                        <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                        <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                            <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource ArcSizeConverter}, Mode=OneWay}"
                                                        SweepDirection="Clockwise">
                                                <ArcSegment.Point>
                                                    <MultiBinding Converter="{StaticResource ArcEndPointConverter}">
                                                        <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                        <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform x:Name="RotateTransform"
                                                         CenterX="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, Mode=OneWay}" 
                                                         CenterY="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, Mode=OneWay}" />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsIndeterminate, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={StaticResource NotZeroConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IsIndeterminateStoryboard}"
                                                 Name="IsIndeterminateStoryboard"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsIndeterminate" Value="True" />
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Value" Value="0" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IsFullyIndeterminateStoryboard}"
                                                 Name="IsFullyIndeterminateStoryboard"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProgressBarDefault2" TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="IsIndeterminateStoryboard" TargetName="RotateTransform" TargetProperty="Angle" RepeatBehavior="Forever">
                            <DoubleAnimation From="0" To="359" Duration="0:0:2" />
                        </Storyboard>
                        <Storyboard x:Key="IsFullyIndeterminateStoryboard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FullyIndeterminateGridScaleTransform"
                                                           Storyboard.TargetProperty="ScaleX"
                                                           RepeatBehavior="Forever">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0.0" />
                                <SplineDoubleKeyFrame KeyTime="0:0:1" Value="1.0" />
                                <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0.0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimation Storyboard.TargetName="RotateTransform"
                                             Storyboard.TargetProperty="Angle" 
                                             RepeatBehavior="Forever"
                                             From="00" To="359" Duration="0:0:1.25" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot" ClipToBounds="False">
                        <Grid x:Name="FullyIndeterminateGrid">
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="FullyIndeterminateGridScaleTransform" ScaleX="0" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="PathGrid" Margin="2" />
                        <Canvas>
                            <Ellipse Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
                            <Path x:Name="Path" Stroke="{TemplateBinding Foreground}" StrokeThickness="3" 
                                  Canvas.Top="2" Canvas.Left="2"
                                  RenderTransformOrigin="0, 0">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure StartPoint="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource StartPointConverter}, Mode=OneWay}">
                                            <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource ArcSizeConverter}, Mode=OneWay}"
                                                        SweepDirection="Clockwise">
                                                <ArcSegment.Point>
                                                    <MultiBinding 
                                                        Converter="{StaticResource ArcEndPointConverter}" 
                                                        ConverterParameter="{x:Static circularProgressBar:ArcEndPointConverter.ParameterMidPoint}">
                                                        <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                        <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                            <ArcSegment Size="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource ArcSizeConverter}, Mode=OneWay}"
                                                        SweepDirection="Clockwise">
                                                <ArcSegment.Point>
                                                    <MultiBinding Converter="{StaticResource ArcEndPointConverter}">
                                                        <Binding ElementName="PathGrid" Path="ActualWidth" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Value" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Minimum" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="Maximum" />
                                                        <Binding ElementName="FullyIndeterminateGridScaleTransform" Path="ScaleX" />
                                                    </MultiBinding>
                                                </ArcSegment.Point>
                                            </ArcSegment>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform x:Name="RotateTransform"
                                                         CenterX="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, Mode=OneWay}" 
                                                         CenterY="{Binding ElementName=PathGrid, Path=ActualWidth, Converter={StaticResource RotateTransformCentreConverter}, Mode=OneWay}" />
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsIndeterminate, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding IsVisible, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={StaticResource NotZeroConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IsIndeterminateStoryboard}"
                                                 Name="IsIndeterminateStoryboard"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsIndeterminateStoryboard" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsIndeterminate" Value="True" />
                                <Condition Property="IsVisible" Value="True" />
                                <Condition Property="Value" Value="0" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IsFullyIndeterminateStoryboard}"
                                                 Name="IsFullyIndeterminateStoryboard"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsFullyIndeterminateStoryboard" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>